dsfklsdjflkasdjfjsadf









def recognize_face(face_encoding, known_face_encoding, known_face_name,timein,timeout):
    current_time = datetime.now()
    user = User.objects.get(username='admin') 
 
    if tuple(face_encoding) in recognize_face_cache and current_time.timestamp() - recognize_face_cache[tuple(face_encoding)]["timestamp"] < cache_exp:
        return recognize_face_cache[tuple(face_encoding)]["name"]

    matches = face_recognition.compare_faces(known_face_encoding, face_encoding, tolerance=THRESHOLD)

    if True in matches:
        first_match_index = matches.index(True)
        name = known_face_name[first_match_index]

        existing_record = TemporaryAttendance.objects.filter(name=name,user=user, date=current_time.date()).first()

        if existing_record:
            # If there's already a record for today, retrieve it
            # timein = existing_record.timein
            # timeout = existing_record.timeout
            return existing_record.name
           
        else:
            # If there's no record for today, create a new one
            timein = current_time if 0 <= current_time.hour < 12 else None
            timeout = current_time if 14 <= current_time.hour < 20 else None

            new_record = TemporaryAttendance(user=user, timein=timein, timeout=timeout, date=current_time.date())
            # new_record.save()
           
           


    def is_new_day(current_date, last_recorded_date):
        return current_date > last_recorded_date if last_recorded_date else True

    if tuple(face_encoding) in recognize_face_cache and current_time.timestamp() - recognize_face_cache[tuple(face_encoding)]["timestamp"] < cache_exp:
        return recognize_face_cache[tuple(face_encoding)]["name"]

    matches = face_recognition.compare_faces(known_face_encoding, face_encoding, tolerance=THRESHOLD)

    if True in matches:
        first_match_index = matches.index(True)
        name = known_face_name[first_match_index]

        if name not in inserted_names:
            recognize_face_cache[tuple(face_encoding)] = {"name": name, "timestamp": current_time.timestamp()}
            inserted_names.add(name)
            current_hour = current_time.hour
            formatted_time = current_time.strftime("%I:%M:%S %p")
            last_entry = TemporaryAttendance.objects.filter(name=name).order_by('-date').first()



            # Rest of your attendance update logic goes here...
            # Check if the last entry is from yesterday
            if last_entry and is_new_day(current_time.date(), last_entry.date):
                last_entry_date = last_entry.date
                # If last entry is from yesterday, create a new entry for today
                if (current_time.date() - last_entry_date).days == 1:
                    new_timein = formatted_time if 0 <= current_time.hour < 12 else None
                    new_timeout = None if 0 <= current_time.hour < 12 else formatted_time if timeout else None

                    TemporaryAttendance.objects.create(
                        name=name,
                        timein=new_timein,
                        timeout=new_timeout,
                        date=current_time.date()
                    )
                    ArchiveAttendance.objects.create(
                        name=name,
                        timein=new_timein,
                        timeout=new_timeout,
                        date=current_time.date()
                    )
                else:
                    # Logic to preserve yesterday's entry
                    yesterday_entry = TemporaryAttendance.objects.get(name=name, date=last_entry_date)
                    if yesterday_entry.timein and yesterday_entry.timeout:
                        # Yesterday's entry is complete, don't overwrite
                        pass
                    elif 0 <= current_time.hour < 12 and yesterday_entry.timein:
                        # Preserve yesterday's timein
                        yesterday_entry.timein = yesterday_entry.timein
                    elif 14 <= current_time.hour < 20 and yesterday_entry.timein and yesterday_entry.timeout:
                        # Preserve yesterday's timeout
                        yesterday_entry.timeout = yesterday_entry.timeout

                    yesterday_entry.save()



            
            last_temp_entry = TemporaryAttendance.objects.filter(name=name, date=current_time.date()).first()
            last_archive_entry = ArchiveAttendance.objects.filter(name=name, date=current_time.date()).first()

            # Check if entries for today already exist
            if last_temp_entry is None and last_archive_entry is None:
                if 0 <= current_hour < 12:
                    timein = current_time.strftime("%I:%M:%S %p")
                    timeout = None
                elif 14 <= current_hour < 19:
                    timein = None
                    timeout = current_time.strftime("%I:%M:%S %p") #if last_archive_entry and last_archive_entry.timein else None

                TemporaryAttendance.objects.create(
                    name=name,
                    timein=timein,
                    timeout=timeout,
                    date=current_time.date()
                )

                if last_archive_entry is None:
                    ArchiveAttendance.objects.create(
                        name=name,
                        timein=timein,
                        timeout=timeout,
                        date=current_time.date()
                    )

            else:
                if 0 <= current_hour < 12:
                    if last_temp_entry:
                        last_temp_entry.timein = formatted_time
                        last_temp_entry.timeout = None
                        last_temp_entry.save()

                    if last_archive_entry:
                        last_archive_entry.timein = formatted_time
                        last_archive_entry.timeout = None
                        last_archive_entry.save()

                elif 14 <= current_hour < 20:
                    if last_temp_entry and last_temp_entry.timein:
                        last_temp_entry.timeout = formatted_time if last_archive_entry and last_archive_entry.timein else None
                        last_temp_entry.save()

                    if last_archive_entry:
                        last_archive_entry.timeout = formatted_time if last_temp_entry and last_temp_entry.timein else None
                        last_archive_entry.save()

            return name
        else:
            return "Analyzing Face..."

